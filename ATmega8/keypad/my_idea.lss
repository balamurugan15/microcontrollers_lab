
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000166  2**0
                  ALLOC
  2 .stab         0000039c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000659  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	54 c0       	rjmp	.+168    	; 0xee <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:


// ***********************************************************
// Main program
//
int main(void) {
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	cd b7       	in	r28, 0x3d	; 61
  4e:	de b7       	in	r29, 0x3e	; 62

   DDRB = 0x0C;
  50:	e7 e3       	ldi	r30, 0x37	; 55
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	8c e0       	ldi	r24, 0x0C	; 12
  56:	80 83       	st	Z, r24
   PORTB = 0x03;
  58:	e8 e3       	ldi	r30, 0x38	; 56
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	83 e0       	ldi	r24, 0x03	; 3
  5e:	80 83       	st	Z, r24
   DDRC = 0x0F;
  60:	e4 e3       	ldi	r30, 0x34	; 52
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	8f e0       	ldi	r24, 0x0F	; 15
  66:	80 83       	st	Z, r24
   PORTC = 0xFF;
  68:	e5 e3       	ldi	r30, 0x35	; 53
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	80 83       	st	Z, r24

   while(1) {
   		PORTB = 0x0B;
  70:	e8 e3       	ldi	r30, 0x38	; 56
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	8b e0       	ldi	r24, 0x0B	; 11
  76:	80 83       	st	Z, r24
   		if(!(PINB & 0x01))
  78:	e6 e3       	ldi	r30, 0x36	; 54
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	88 2f       	mov	r24, r24
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	81 70       	andi	r24, 0x01	; 1
  84:	90 70       	andi	r25, 0x00	; 0
  86:	00 97       	sbiw	r24, 0x00	; 0
  88:	29 f4       	brne	.+10     	; 0x94 <main+0x4c>
   			PORTC = ~(0x01);
  8a:	e5 e3       	ldi	r30, 0x35	; 53
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	8e ef       	ldi	r24, 0xFE	; 254
  90:	80 83       	st	Z, r24
  92:	0d c0       	rjmp	.+26     	; 0xae <main+0x66>
   		else if(!(PINB & 0x02))
  94:	e6 e3       	ldi	r30, 0x36	; 54
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	88 2f       	mov	r24, r24
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	82 70       	andi	r24, 0x02	; 2
  a0:	90 70       	andi	r25, 0x00	; 0
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	21 f4       	brne	.+8      	; 0xae <main+0x66>
   			PORTC = ~(0x04);
  a6:	e5 e3       	ldi	r30, 0x35	; 53
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	8b ef       	ldi	r24, 0xFB	; 251
  ac:	80 83       	st	Z, r24
   		
   		PORTB = 0x07;
  ae:	e8 e3       	ldi	r30, 0x38	; 56
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	87 e0       	ldi	r24, 0x07	; 7
  b4:	80 83       	st	Z, r24
   		if(!(PINB & 0x01))
  b6:	e6 e3       	ldi	r30, 0x36	; 54
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	81 70       	andi	r24, 0x01	; 1
  c2:	90 70       	andi	r25, 0x00	; 0
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	29 f4       	brne	.+10     	; 0xd2 <main+0x8a>
   			PORTC = ~(0x02);
  c8:	e5 e3       	ldi	r30, 0x35	; 53
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	8d ef       	ldi	r24, 0xFD	; 253
  ce:	80 83       	st	Z, r24
  d0:	cf cf       	rjmp	.-98     	; 0x70 <main+0x28>
   		else if(!(PINB & 0x02))
  d2:	e6 e3       	ldi	r30, 0x36	; 54
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 2f       	mov	r24, r24
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	82 70       	andi	r24, 0x02	; 2
  de:	90 70       	andi	r25, 0x00	; 0
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	31 f6       	brne	.-116    	; 0x70 <main+0x28>
   			PORTC = ~(0x08);
  e4:	e5 e3       	ldi	r30, 0x35	; 53
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	87 ef       	ldi	r24, 0xF7	; 247
  ea:	80 83       	st	Z, r24
  ec:	c1 cf       	rjmp	.-126    	; 0x70 <main+0x28>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
