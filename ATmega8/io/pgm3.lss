
pgm3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000146  2**0
                  ALLOC
  2 .stab         000003d8  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000685  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	1a d0       	rcall	.+52     	; 0x78 <main>
  44:	44 c0       	rjmp	.+136    	; 0xce <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_1>:
//
int My_global;

// Interrupt handler example for INT0
//
SIGNAL(SIG_INTERRUPT0) {
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	df 93       	push	r29
  54:	cf 93       	push	r28
  56:	cd b7       	in	r28, 0x3d	; 61
  58:	de b7       	in	r29, 0x3e	; 62

}
  5a:	cf 91       	pop	r28
  5c:	df 91       	pop	r29
  5e:	0f 90       	pop	r0
  60:	0f be       	out	0x3f, r0	; 63
  62:	0f 90       	pop	r0
  64:	1f 90       	pop	r1
  66:	18 95       	reti

00000068 <my_function>:

// It is recommended to use this coding style to
// follow better the mixed C-assembly code in the
// Program Memory window
//
void my_function(void) {  // Put the open brace '{' here
  68:	df 93       	push	r29
  6a:	cf 93       	push	r28
  6c:	cd b7       	in	r28, 0x3d	; 61
  6e:	de b7       	in	r29, 0x3e	; 62

   asm("nop");          // Inline assembly example
  70:	00 00       	nop
}
  72:	cf 91       	pop	r28
  74:	df 91       	pop	r29
  76:	08 95       	ret

00000078 <main>:

// ***********************************************************
// Main program
//
int main(void)
 {
  78:	df 93       	push	r29
  7a:	cf 93       	push	r28
  7c:	00 d0       	rcall	.+0      	; 0x7e <main+0x6>
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
int a;
DDRB=0x00;
  82:	e7 e3       	ldi	r30, 0x37	; 55
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	10 82       	st	Z, r1
DDRC=0x01;
  88:	e4 e3       	ldi	r30, 0x34	; 52
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	80 83       	st	Z, r24
PORTC=0x01;
  90:	e5 e3       	ldi	r30, 0x35	; 53
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	80 83       	st	Z, r24




 while(1) {
 a=PINB;
  98:	e6 e3       	ldi	r30, 0x36	; 54
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	88 2f       	mov	r24, r24
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	9a 83       	std	Y+2, r25	; 0x02
  a4:	89 83       	std	Y+1, r24	; 0x01
a=a&0x01 ;
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	9a 81       	ldd	r25, Y+2	; 0x02
  aa:	81 70       	andi	r24, 0x01	; 1
  ac:	90 70       	andi	r25, 0x00	; 0
  ae:	9a 83       	std	Y+2, r25	; 0x02
  b0:	89 83       	std	Y+1, r24	; 0x01
if(a==0x00)
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	9a 81       	ldd	r25, Y+2	; 0x02
  b6:	00 97       	sbiw	r24, 0x00	; 0
  b8:	21 f4       	brne	.+8      	; 0xc2 <main+0x4a>
PORTC=0x00 ;
  ba:	e5 e3       	ldi	r30, 0x35	; 53
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
  c0:	04 c0       	rjmp	.+8      	; 0xca <main+0x52>
else
PORTC=0x01;           // Infinite loop; define here the
  c2:	e5 e3       	ldi	r30, 0x35	; 53
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
      my_function();      // system behaviour
  ca:	ce df       	rcall	.-100    	; 0x68 <my_function>
  cc:	e5 cf       	rjmp	.-54     	; 0x98 <main+0x20>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
