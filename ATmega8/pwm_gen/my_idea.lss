
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000012a  2**0
                  ALLOC
  2 .stab         00000360  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000659  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	36 c0       	rjmp	.+108    	; 0xb2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:


// ***********************************************************
// Main program
//
int main(void) {
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	cd b7       	in	r28, 0x3d	; 61
  4e:	de b7       	in	r29, 0x3e	; 62

   DDRB = 0x02;
  50:	e7 e3       	ldi	r30, 0x37	; 55
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	82 e0       	ldi	r24, 0x02	; 2
  56:	80 83       	st	Z, r24
   DDRC = 0x01;
  58:	e4 e3       	ldi	r30, 0x34	; 52
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	80 83       	st	Z, r24
	TCCR1A = (1<<COM1A1) | (1<<WGM11) | (1<<WGM10);
  60:	ef e4       	ldi	r30, 0x4F	; 79
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	83 e8       	ldi	r24, 0x83	; 131
  66:	80 83       	st	Z, r24
	OCR1AH = 0x01;
  68:	eb e4       	ldi	r30, 0x4B	; 75
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	80 83       	st	Z, r24
	OCR1AL = 0xFF;
  70:	ea e4       	ldi	r30, 0x4A	; 74
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	80 83       	st	Z, r24
	TCCR1B = (1<<CS10);
  78:	ee e4       	ldi	r30, 0x4E	; 78
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	80 83       	st	Z, r24
	
	
   while(1) {             // Infinite loop; define here the
		
		if(PINB & 0x02)
  80:	e6 e3       	ldi	r30, 0x36	; 54
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	88 2f       	mov	r24, r24
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	82 70       	andi	r24, 0x02	; 2
  8c:	90 70       	andi	r25, 0x00	; 0
  8e:	00 97       	sbiw	r24, 0x00	; 0
  90:	41 f0       	breq	.+16     	; 0xa2 <main+0x5a>
			PORTC = PORTC | 0x01;
  92:	a5 e3       	ldi	r26, 0x35	; 53
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e5 e3       	ldi	r30, 0x35	; 53
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8c 93       	st	X, r24
  a0:	ef cf       	rjmp	.-34     	; 0x80 <main+0x38>
		else PORTC = PORTC & 0xFE; 	
  a2:	a5 e3       	ldi	r26, 0x35	; 53
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e5 e3       	ldi	r30, 0x35	; 53
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	8c 93       	st	X, r24
  b0:	e7 cf       	rjmp	.-50     	; 0x80 <main+0x38>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
