
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000004b0  2**0
                  ALLOC
  2 .stab         0000060c  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006ff  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	9e d0       	rcall	.+316    	; 0x180 <main>
  44:	f9 c1       	rjmp	.+1010   	; 0x438 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <delay>:
//
int My_global;

int i;

void delay(){
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	cd b7       	in	r28, 0x3d	; 61
  4e:	de b7       	in	r29, 0x3e	; 62
  50:	2e 97       	sbiw	r28, 0x0e	; 14
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	f8 94       	cli
  56:	de bf       	out	0x3e, r29	; 62
  58:	0f be       	out	0x3f, r0	; 63
  5a:	cd bf       	out	0x3d, r28	; 61
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	a0 e7       	ldi	r26, 0x70	; 112
  62:	b1 e4       	ldi	r27, 0x41	; 65
  64:	8b 87       	std	Y+11, r24	; 0x0b
  66:	9c 87       	std	Y+12, r25	; 0x0c
  68:	ad 87       	std	Y+13, r26	; 0x0d
  6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  6c:	6b 85       	ldd	r22, Y+11	; 0x0b
  6e:	7c 85       	ldd	r23, Y+12	; 0x0c
  70:	8d 85       	ldd	r24, Y+13	; 0x0d
  72:	9e 85       	ldd	r25, Y+14	; 0x0e
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	4a e7       	ldi	r20, 0x7A	; 122
  7a:	53 e4       	ldi	r21, 0x43	; 67
  7c:	52 d1       	rcall	.+676    	; 0x322 <__mulsf3>
  7e:	dc 01       	movw	r26, r24
  80:	cb 01       	movw	r24, r22
  82:	8f 83       	std	Y+7, r24	; 0x07
  84:	98 87       	std	Y+8, r25	; 0x08
  86:	a9 87       	std	Y+9, r26	; 0x09
  88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
  8a:	6f 81       	ldd	r22, Y+7	; 0x07
  8c:	78 85       	ldd	r23, Y+8	; 0x08
  8e:	89 85       	ldd	r24, Y+9	; 0x09
  90:	9a 85       	ldd	r25, Y+10	; 0x0a
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	40 e8       	ldi	r20, 0x80	; 128
  98:	5f e3       	ldi	r21, 0x3F	; 63
  9a:	c2 d0       	rcall	.+388    	; 0x220 <__cmpsf2>
  9c:	88 23       	and	r24, r24
  9e:	2c f4       	brge	.+10     	; 0xaa <delay+0x62>
		__ticks = 1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	9e 83       	std	Y+6, r25	; 0x06
  a6:	8d 83       	std	Y+5, r24	; 0x05
  a8:	3b c0       	rjmp	.+118    	; 0x120 <delay+0xd8>
	else if (__tmp > 65535)
  aa:	6f 81       	ldd	r22, Y+7	; 0x07
  ac:	78 85       	ldd	r23, Y+8	; 0x08
  ae:	89 85       	ldd	r24, Y+9	; 0x09
  b0:	9a 85       	ldd	r25, Y+10	; 0x0a
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	3f ef       	ldi	r19, 0xFF	; 255
  b6:	4f e7       	ldi	r20, 0x7F	; 127
  b8:	57 e4       	ldi	r21, 0x47	; 71
  ba:	2f d1       	rcall	.+606    	; 0x31a <__gesf2>
  bc:	18 16       	cp	r1, r24
  be:	3c f5       	brge	.+78     	; 0x10e <delay+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  c0:	6b 85       	ldd	r22, Y+11	; 0x0b
  c2:	7c 85       	ldd	r23, Y+12	; 0x0c
  c4:	8d 85       	ldd	r24, Y+13	; 0x0d
  c6:	9e 85       	ldd	r25, Y+14	; 0x0e
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	40 e2       	ldi	r20, 0x20	; 32
  ce:	51 e4       	ldi	r21, 0x41	; 65
  d0:	28 d1       	rcall	.+592    	; 0x322 <__mulsf3>
  d2:	dc 01       	movw	r26, r24
  d4:	cb 01       	movw	r24, r22
  d6:	bc 01       	movw	r22, r24
  d8:	cd 01       	movw	r24, r26
  da:	a6 d0       	rcall	.+332    	; 0x228 <__fixunssfsi>
  dc:	dc 01       	movw	r26, r24
  de:	cb 01       	movw	r24, r22
  e0:	9e 83       	std	Y+6, r25	; 0x06
  e2:	8d 83       	std	Y+5, r24	; 0x05
  e4:	0f c0       	rjmp	.+30     	; 0x104 <delay+0xbc>
  e6:	89 e1       	ldi	r24, 0x19	; 25
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	9c 83       	std	Y+4, r25	; 0x04
  ec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ee:	8b 81       	ldd	r24, Y+3	; 0x03
  f0:	9c 81       	ldd	r25, Y+4	; 0x04
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <delay+0xaa>
  f6:	9c 83       	std	Y+4, r25	; 0x04
  f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fa:	8d 81       	ldd	r24, Y+5	; 0x05
  fc:	9e 81       	ldd	r25, Y+6	; 0x06
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	9e 83       	std	Y+6, r25	; 0x06
 102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 104:	8d 81       	ldd	r24, Y+5	; 0x05
 106:	9e 81       	ldd	r25, Y+6	; 0x06
 108:	00 97       	sbiw	r24, 0x00	; 0
 10a:	69 f7       	brne	.-38     	; 0xe6 <delay+0x9e>
 10c:	13 c0       	rjmp	.+38     	; 0x134 <delay+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 10e:	6f 81       	ldd	r22, Y+7	; 0x07
 110:	78 85       	ldd	r23, Y+8	; 0x08
 112:	89 85       	ldd	r24, Y+9	; 0x09
 114:	9a 85       	ldd	r25, Y+10	; 0x0a
 116:	88 d0       	rcall	.+272    	; 0x228 <__fixunssfsi>
 118:	dc 01       	movw	r26, r24
 11a:	cb 01       	movw	r24, r22
 11c:	9e 83       	std	Y+6, r25	; 0x06
 11e:	8d 83       	std	Y+5, r24	; 0x05
 120:	8d 81       	ldd	r24, Y+5	; 0x05
 122:	9e 81       	ldd	r25, Y+6	; 0x06
 124:	9a 83       	std	Y+2, r25	; 0x02
 126:	89 83       	std	Y+1, r24	; 0x01
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <delay+0xe4>
 130:	9a 83       	std	Y+2, r25	; 0x02
 132:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);
	
/*	i = k;
	while(i>0) i--; */
}
 134:	2e 96       	adiw	r28, 0x0e	; 14
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	08 95       	ret

00000146 <writeCommand>:

void writeCommand(){
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x01; //command selected
 14e:	e8 e3       	ldi	r30, 0x38	; 56
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
	PORTB = 0x00;
 156:	e8 e3       	ldi	r30, 0x38	; 56
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	10 82       	st	Z, r1
}
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	08 95       	ret

00000162 <writeData>:

void writeData(){
 162:	df 93       	push	r29
 164:	cf 93       	push	r28
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
   PORTB = 0x05; //data selected	
 16a:	e8 e3       	ldi	r30, 0x38	; 56
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	80 83       	st	Z, r24
	PORTB = 0x04;
 172:	e8 e3       	ldi	r30, 0x38	; 56
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	80 83       	st	Z, r24
}
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	08 95       	ret

00000180 <main>:


// ***********************************************************
// Main program
//
int main(void) {
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
	
	
	DDRB = 0x07;
 188:	e7 e3       	ldi	r30, 0x37	; 55
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	87 e0       	ldi	r24, 0x07	; 7
 18e:	80 83       	st	Z, r24
	DDRD = 0xFF;	
 190:	e1 e3       	ldi	r30, 0x31	; 49
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	80 83       	st	Z, r24
	delay();
 198:	57 df       	rcall	.-338    	; 0x48 <delay>
	
	
	PORTD = 0x30; //8-bit mode
 19a:	e2 e3       	ldi	r30, 0x32	; 50
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	80 83       	st	Z, r24
	writeCommand();
 1a2:	d1 df       	rcall	.-94     	; 0x146 <writeCommand>
	delay();
 1a4:	51 df       	rcall	.-350    	; 0x48 <delay>
	
	PORTD = 0x0F; //turn on, cursor enable, blink
 1a6:	e2 e3       	ldi	r30, 0x32	; 50
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	8f e0       	ldi	r24, 0x0F	; 15
 1ac:	80 83       	st	Z, r24
   writeCommand();
 1ae:	cb df       	rcall	.-106    	; 0x146 <writeCommand>
	delay();
 1b0:	4b df       	rcall	.-362    	; 0x48 <delay>
		
	PORTD = 0x01; //clear
 1b2:	e2 e3       	ldi	r30, 0x32	; 50
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 83       	st	Z, r24
	writeCommand();
 1ba:	c5 df       	rcall	.-118    	; 0x146 <writeCommand>
	delay();
 1bc:	45 df       	rcall	.-374    	; 0x48 <delay>
		
	PORTD = 0x80; //start address line 1
 1be:	e2 e3       	ldi	r30, 0x32	; 50
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	80 83       	st	Z, r24
	writeCommand();
 1c6:	bf df       	rcall	.-130    	; 0x146 <writeCommand>
	delay();
 1c8:	3f df       	rcall	.-386    	; 0x48 <delay>
	
	PORTD = 0x41; //data - 'A'	
 1ca:	e2 e3       	ldi	r30, 0x32	; 50
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	81 e4       	ldi	r24, 0x41	; 65
 1d0:	80 83       	st	Z, r24
	writeData();
 1d2:	c7 df       	rcall	.-114    	; 0x162 <writeData>
	delay();
 1d4:	39 df       	rcall	.-398    	; 0x48 <delay>
	
	PORTD = 0x42; //data - 'B'	
 1d6:	e2 e3       	ldi	r30, 0x32	; 50
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	82 e4       	ldi	r24, 0x42	; 66
 1dc:	80 83       	st	Z, r24
	writeData();
 1de:	c1 df       	rcall	.-126    	; 0x162 <writeData>
	delay();
 1e0:	33 df       	rcall	.-410    	; 0x48 <delay>
	
	
	PORTD = 0x43; //data 'C'	
 1e2:	e2 e3       	ldi	r30, 0x32	; 50
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	83 e4       	ldi	r24, 0x43	; 67
 1e8:	80 83       	st	Z, r24
	writeData();
 1ea:	bb df       	rcall	.-138    	; 0x162 <writeData>
	delay();
 1ec:	2d df       	rcall	.-422    	; 0x48 <delay>
	
	PORTD = 0xC0; //start address line 2
 1ee:	e2 e3       	ldi	r30, 0x32	; 50
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 ec       	ldi	r24, 0xC0	; 192
 1f4:	80 83       	st	Z, r24
	writeCommand();
 1f6:	a7 df       	rcall	.-178    	; 0x146 <writeCommand>
	delay();
 1f8:	27 df       	rcall	.-434    	; 0x48 <delay>
	
	PORTD = 0x44;  //data 'D'	
 1fa:	e2 e3       	ldi	r30, 0x32	; 50
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	84 e4       	ldi	r24, 0x44	; 68
 200:	80 83       	st	Z, r24
	writeData();
 202:	af df       	rcall	.-162    	; 0x162 <writeData>
	delay();
 204:	21 df       	rcall	.-446    	; 0x48 <delay>
	
	PORTD = 0x45;  //data 'E'	
 206:	e2 e3       	ldi	r30, 0x32	; 50
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	85 e4       	ldi	r24, 0x45	; 69
 20c:	80 83       	st	Z, r24
	writeData();
 20e:	a9 df       	rcall	.-174    	; 0x162 <writeData>
	delay();
 210:	1b df       	rcall	.-458    	; 0x48 <delay>
	
	PORTD = 0x46;  //data 'F'	
 212:	e2 e3       	ldi	r30, 0x32	; 50
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	86 e4       	ldi	r24, 0x46	; 70
 218:	80 83       	st	Z, r24
	writeData();
 21a:	a3 df       	rcall	.-186    	; 0x162 <writeData>
	delay();
 21c:	15 df       	rcall	.-470    	; 0x48 <delay>
 21e:	ff cf       	rjmp	.-2      	; 0x21e <main+0x9e>

00000220 <__cmpsf2>:
 220:	2f d0       	rcall	.+94     	; 0x280 <__fp_cmp>
 222:	08 f4       	brcc	.+2      	; 0x226 <__cmpsf2+0x6>
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	08 95       	ret

00000228 <__fixunssfsi>:
 228:	57 d0       	rcall	.+174    	; 0x2d8 <__fp_splitA>
 22a:	88 f0       	brcs	.+34     	; 0x24e <__fixunssfsi+0x26>
 22c:	9f 57       	subi	r25, 0x7F	; 127
 22e:	90 f0       	brcs	.+36     	; 0x254 <__fixunssfsi+0x2c>
 230:	b9 2f       	mov	r27, r25
 232:	99 27       	eor	r25, r25
 234:	b7 51       	subi	r27, 0x17	; 23
 236:	a0 f0       	brcs	.+40     	; 0x260 <__fixunssfsi+0x38>
 238:	d1 f0       	breq	.+52     	; 0x26e <__fixunssfsi+0x46>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	88 1f       	adc	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	1a f0       	brmi	.+6      	; 0x24a <__fixunssfsi+0x22>
 244:	ba 95       	dec	r27
 246:	c9 f7       	brne	.-14     	; 0x23a <__fixunssfsi+0x12>
 248:	12 c0       	rjmp	.+36     	; 0x26e <__fixunssfsi+0x46>
 24a:	b1 30       	cpi	r27, 0x01	; 1
 24c:	81 f0       	breq	.+32     	; 0x26e <__fixunssfsi+0x46>
 24e:	5e d0       	rcall	.+188    	; 0x30c <__fp_zero>
 250:	b1 e0       	ldi	r27, 0x01	; 1
 252:	08 95       	ret
 254:	5b c0       	rjmp	.+182    	; 0x30c <__fp_zero>
 256:	67 2f       	mov	r22, r23
 258:	78 2f       	mov	r23, r24
 25a:	88 27       	eor	r24, r24
 25c:	b8 5f       	subi	r27, 0xF8	; 248
 25e:	39 f0       	breq	.+14     	; 0x26e <__fixunssfsi+0x46>
 260:	b9 3f       	cpi	r27, 0xF9	; 249
 262:	cc f3       	brlt	.-14     	; 0x256 <__fixunssfsi+0x2e>
 264:	86 95       	lsr	r24
 266:	77 95       	ror	r23
 268:	67 95       	ror	r22
 26a:	b3 95       	inc	r27
 26c:	d9 f7       	brne	.-10     	; 0x264 <__fixunssfsi+0x3c>
 26e:	3e f4       	brtc	.+14     	; 0x27e <__fixunssfsi+0x56>
 270:	90 95       	com	r25
 272:	80 95       	com	r24
 274:	70 95       	com	r23
 276:	61 95       	neg	r22
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	8f 4f       	sbci	r24, 0xFF	; 255
 27c:	9f 4f       	sbci	r25, 0xFF	; 255
 27e:	08 95       	ret

00000280 <__fp_cmp>:
 280:	99 0f       	add	r25, r25
 282:	00 08       	sbc	r0, r0
 284:	55 0f       	add	r21, r21
 286:	aa 0b       	sbc	r26, r26
 288:	e0 e8       	ldi	r30, 0x80	; 128
 28a:	fe ef       	ldi	r31, 0xFE	; 254
 28c:	16 16       	cp	r1, r22
 28e:	17 06       	cpc	r1, r23
 290:	e8 07       	cpc	r30, r24
 292:	f9 07       	cpc	r31, r25
 294:	c0 f0       	brcs	.+48     	; 0x2c6 <__fp_cmp+0x46>
 296:	12 16       	cp	r1, r18
 298:	13 06       	cpc	r1, r19
 29a:	e4 07       	cpc	r30, r20
 29c:	f5 07       	cpc	r31, r21
 29e:	98 f0       	brcs	.+38     	; 0x2c6 <__fp_cmp+0x46>
 2a0:	62 1b       	sub	r22, r18
 2a2:	73 0b       	sbc	r23, r19
 2a4:	84 0b       	sbc	r24, r20
 2a6:	95 0b       	sbc	r25, r21
 2a8:	39 f4       	brne	.+14     	; 0x2b8 <__fp_cmp+0x38>
 2aa:	0a 26       	eor	r0, r26
 2ac:	61 f0       	breq	.+24     	; 0x2c6 <__fp_cmp+0x46>
 2ae:	23 2b       	or	r18, r19
 2b0:	24 2b       	or	r18, r20
 2b2:	25 2b       	or	r18, r21
 2b4:	21 f4       	brne	.+8      	; 0x2be <__fp_cmp+0x3e>
 2b6:	08 95       	ret
 2b8:	0a 26       	eor	r0, r26
 2ba:	09 f4       	brne	.+2      	; 0x2be <__fp_cmp+0x3e>
 2bc:	a1 40       	sbci	r26, 0x01	; 1
 2be:	a6 95       	lsr	r26
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	81 1d       	adc	r24, r1
 2c4:	81 1d       	adc	r24, r1
 2c6:	08 95       	ret

000002c8 <__fp_split3>:
 2c8:	57 fd       	sbrc	r21, 7
 2ca:	90 58       	subi	r25, 0x80	; 128
 2cc:	44 0f       	add	r20, r20
 2ce:	55 1f       	adc	r21, r21
 2d0:	59 f0       	breq	.+22     	; 0x2e8 <__fp_splitA+0x10>
 2d2:	5f 3f       	cpi	r21, 0xFF	; 255
 2d4:	71 f0       	breq	.+28     	; 0x2f2 <__fp_splitA+0x1a>
 2d6:	47 95       	ror	r20

000002d8 <__fp_splitA>:
 2d8:	88 0f       	add	r24, r24
 2da:	97 fb       	bst	r25, 7
 2dc:	99 1f       	adc	r25, r25
 2de:	61 f0       	breq	.+24     	; 0x2f8 <__fp_splitA+0x20>
 2e0:	9f 3f       	cpi	r25, 0xFF	; 255
 2e2:	79 f0       	breq	.+30     	; 0x302 <__fp_splitA+0x2a>
 2e4:	87 95       	ror	r24
 2e6:	08 95       	ret
 2e8:	12 16       	cp	r1, r18
 2ea:	13 06       	cpc	r1, r19
 2ec:	14 06       	cpc	r1, r20
 2ee:	55 1f       	adc	r21, r21
 2f0:	f2 cf       	rjmp	.-28     	; 0x2d6 <__fp_split3+0xe>
 2f2:	46 95       	lsr	r20
 2f4:	f1 df       	rcall	.-30     	; 0x2d8 <__fp_splitA>
 2f6:	08 c0       	rjmp	.+16     	; 0x308 <__fp_splitA+0x30>
 2f8:	16 16       	cp	r1, r22
 2fa:	17 06       	cpc	r1, r23
 2fc:	18 06       	cpc	r1, r24
 2fe:	99 1f       	adc	r25, r25
 300:	f1 cf       	rjmp	.-30     	; 0x2e4 <__fp_splitA+0xc>
 302:	86 95       	lsr	r24
 304:	71 05       	cpc	r23, r1
 306:	61 05       	cpc	r22, r1
 308:	08 94       	sec
 30a:	08 95       	ret

0000030c <__fp_zero>:
 30c:	e8 94       	clt

0000030e <__fp_szero>:
 30e:	bb 27       	eor	r27, r27
 310:	66 27       	eor	r22, r22
 312:	77 27       	eor	r23, r23
 314:	cb 01       	movw	r24, r22
 316:	97 f9       	bld	r25, 7
 318:	08 95       	ret

0000031a <__gesf2>:
 31a:	b2 df       	rcall	.-156    	; 0x280 <__fp_cmp>
 31c:	08 f4       	brcc	.+2      	; 0x320 <__gesf2+0x6>
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	08 95       	ret

00000322 <__mulsf3>:
 322:	0b d0       	rcall	.+22     	; 0x33a <__mulsf3x>
 324:	78 c0       	rjmp	.+240    	; 0x416 <__fp_round>
 326:	69 d0       	rcall	.+210    	; 0x3fa <__fp_pscA>
 328:	28 f0       	brcs	.+10     	; 0x334 <__mulsf3+0x12>
 32a:	6e d0       	rcall	.+220    	; 0x408 <__fp_pscB>
 32c:	18 f0       	brcs	.+6      	; 0x334 <__mulsf3+0x12>
 32e:	95 23       	and	r25, r21
 330:	09 f0       	breq	.+2      	; 0x334 <__mulsf3+0x12>
 332:	5a c0       	rjmp	.+180    	; 0x3e8 <__fp_inf>
 334:	5f c0       	rjmp	.+190    	; 0x3f4 <__fp_nan>
 336:	11 24       	eor	r1, r1
 338:	ea cf       	rjmp	.-44     	; 0x30e <__fp_szero>

0000033a <__mulsf3x>:
 33a:	c6 df       	rcall	.-116    	; 0x2c8 <__fp_split3>
 33c:	a0 f3       	brcs	.-24     	; 0x326 <__mulsf3+0x4>

0000033e <__mulsf3_pse>:
 33e:	95 9f       	mul	r25, r21
 340:	d1 f3       	breq	.-12     	; 0x336 <__mulsf3+0x14>
 342:	95 0f       	add	r25, r21
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	55 1f       	adc	r21, r21
 348:	62 9f       	mul	r22, r18
 34a:	f0 01       	movw	r30, r0
 34c:	72 9f       	mul	r23, r18
 34e:	bb 27       	eor	r27, r27
 350:	f0 0d       	add	r31, r0
 352:	b1 1d       	adc	r27, r1
 354:	63 9f       	mul	r22, r19
 356:	aa 27       	eor	r26, r26
 358:	f0 0d       	add	r31, r0
 35a:	b1 1d       	adc	r27, r1
 35c:	aa 1f       	adc	r26, r26
 35e:	64 9f       	mul	r22, r20
 360:	66 27       	eor	r22, r22
 362:	b0 0d       	add	r27, r0
 364:	a1 1d       	adc	r26, r1
 366:	66 1f       	adc	r22, r22
 368:	82 9f       	mul	r24, r18
 36a:	22 27       	eor	r18, r18
 36c:	b0 0d       	add	r27, r0
 36e:	a1 1d       	adc	r26, r1
 370:	62 1f       	adc	r22, r18
 372:	73 9f       	mul	r23, r19
 374:	b0 0d       	add	r27, r0
 376:	a1 1d       	adc	r26, r1
 378:	62 1f       	adc	r22, r18
 37a:	83 9f       	mul	r24, r19
 37c:	a0 0d       	add	r26, r0
 37e:	61 1d       	adc	r22, r1
 380:	22 1f       	adc	r18, r18
 382:	74 9f       	mul	r23, r20
 384:	33 27       	eor	r19, r19
 386:	a0 0d       	add	r26, r0
 388:	61 1d       	adc	r22, r1
 38a:	23 1f       	adc	r18, r19
 38c:	84 9f       	mul	r24, r20
 38e:	60 0d       	add	r22, r0
 390:	21 1d       	adc	r18, r1
 392:	82 2f       	mov	r24, r18
 394:	76 2f       	mov	r23, r22
 396:	6a 2f       	mov	r22, r26
 398:	11 24       	eor	r1, r1
 39a:	9f 57       	subi	r25, 0x7F	; 127
 39c:	50 40       	sbci	r21, 0x00	; 0
 39e:	8a f0       	brmi	.+34     	; 0x3c2 <__mulsf3_pse+0x84>
 3a0:	e1 f0       	breq	.+56     	; 0x3da <__mulsf3_pse+0x9c>
 3a2:	88 23       	and	r24, r24
 3a4:	4a f0       	brmi	.+18     	; 0x3b8 <__mulsf3_pse+0x7a>
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	bb 1f       	adc	r27, r27
 3ac:	66 1f       	adc	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	88 1f       	adc	r24, r24
 3b2:	91 50       	subi	r25, 0x01	; 1
 3b4:	50 40       	sbci	r21, 0x00	; 0
 3b6:	a9 f7       	brne	.-22     	; 0x3a2 <__mulsf3_pse+0x64>
 3b8:	9e 3f       	cpi	r25, 0xFE	; 254
 3ba:	51 05       	cpc	r21, r1
 3bc:	70 f0       	brcs	.+28     	; 0x3da <__mulsf3_pse+0x9c>
 3be:	14 c0       	rjmp	.+40     	; 0x3e8 <__fp_inf>
 3c0:	a6 cf       	rjmp	.-180    	; 0x30e <__fp_szero>
 3c2:	5f 3f       	cpi	r21, 0xFF	; 255
 3c4:	ec f3       	brlt	.-6      	; 0x3c0 <__mulsf3_pse+0x82>
 3c6:	98 3e       	cpi	r25, 0xE8	; 232
 3c8:	dc f3       	brlt	.-10     	; 0x3c0 <__mulsf3_pse+0x82>
 3ca:	86 95       	lsr	r24
 3cc:	77 95       	ror	r23
 3ce:	67 95       	ror	r22
 3d0:	b7 95       	ror	r27
 3d2:	f7 95       	ror	r31
 3d4:	e7 95       	ror	r30
 3d6:	9f 5f       	subi	r25, 0xFF	; 255
 3d8:	c1 f7       	brne	.-16     	; 0x3ca <__mulsf3_pse+0x8c>
 3da:	fe 2b       	or	r31, r30
 3dc:	88 0f       	add	r24, r24
 3de:	91 1d       	adc	r25, r1
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	97 f9       	bld	r25, 7
 3e6:	08 95       	ret

000003e8 <__fp_inf>:
 3e8:	97 f9       	bld	r25, 7
 3ea:	9f 67       	ori	r25, 0x7F	; 127
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	08 95       	ret

000003f4 <__fp_nan>:
 3f4:	9f ef       	ldi	r25, 0xFF	; 255
 3f6:	80 ec       	ldi	r24, 0xC0	; 192
 3f8:	08 95       	ret

000003fa <__fp_pscA>:
 3fa:	00 24       	eor	r0, r0
 3fc:	0a 94       	dec	r0
 3fe:	16 16       	cp	r1, r22
 400:	17 06       	cpc	r1, r23
 402:	18 06       	cpc	r1, r24
 404:	09 06       	cpc	r0, r25
 406:	08 95       	ret

00000408 <__fp_pscB>:
 408:	00 24       	eor	r0, r0
 40a:	0a 94       	dec	r0
 40c:	12 16       	cp	r1, r18
 40e:	13 06       	cpc	r1, r19
 410:	14 06       	cpc	r1, r20
 412:	05 06       	cpc	r0, r21
 414:	08 95       	ret

00000416 <__fp_round>:
 416:	09 2e       	mov	r0, r25
 418:	03 94       	inc	r0
 41a:	00 0c       	add	r0, r0
 41c:	11 f4       	brne	.+4      	; 0x422 <__fp_round+0xc>
 41e:	88 23       	and	r24, r24
 420:	52 f0       	brmi	.+20     	; 0x436 <__fp_round+0x20>
 422:	bb 0f       	add	r27, r27
 424:	40 f4       	brcc	.+16     	; 0x436 <__fp_round+0x20>
 426:	bf 2b       	or	r27, r31
 428:	11 f4       	brne	.+4      	; 0x42e <__fp_round+0x18>
 42a:	60 ff       	sbrs	r22, 0
 42c:	04 c0       	rjmp	.+8      	; 0x436 <__fp_round+0x20>
 42e:	6f 5f       	subi	r22, 0xFF	; 255
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	08 95       	ret

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
